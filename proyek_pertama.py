# -*- coding: utf-8 -*-
"""Proyek-pertama.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Lw2WFe4OtU3qfYjsmxX_YodqJDWSfPy
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv("https://raw.githubusercontent.com/Athallah22/Data/refs/heads/main/video%20games%20sales.csv")
df

df.info()

df.describe()

"""Melakukan pengecekan missing value"""

df.isnull().sum()

print("Jumlah duplikasi: ", df.duplicated().sum())

"""Melakukan EDA"""

# Cek distribusi tahun rilis
plt.figure(figsize=(12,6))
sns.histplot(df['Year'], bins=30, kde=True)
plt.title('Distribusi Tahun Rilis')
plt.xlabel('Tahun')
plt.ylabel('Jumlah Game')
plt.xticks(rotation=45)
plt.show()

# Top 10 Publisher berdasarkan jumlah game
top_publishers = df['Publisher'].value_counts().head(10)
plt.figure(figsize=(10,5))
sns.barplot(x=top_publishers.values, y=top_publishers.index, palette='viridis')
plt.title('Top 10 Publisher berdasarkan Jumlah Game')
plt.xlabel('Jumlah Game')
plt.ylabel('Publisher')
plt.show()

# Korelasi antar penjualan regional
sales_cols = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']
plt.figure(figsize=(8,6))
sns.heatmap(df[sales_cols].corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Korelasi Penjualan Regional')
plt.show()

# Scatter plot NA_Sales vs Global_Sales
plt.figure(figsize=(6,5))
sns.scatterplot(data=df, x='NA_Sales', y='Global_Sales', alpha=0.5)
plt.title('NA Sales vs Global Sales')
plt.xlabel('NA Sales (juta)')
plt.ylabel('Global Sales (juta)')
plt.show()

# Boxplot genre terhadap Global_Sales
plt.figure(figsize=(14,6))
sns.boxplot(x='Genre', y='Global_Sales', data=df)
plt.xticks(rotation=45)
plt.title('Perbandingan Penjualan Global Berdasarkan Genre')
plt.show()

# Penjualan total per platform (Top 10)
platform_sales = df.groupby('Platform')['Global_Sales'].sum().sort_values(ascending=False).head(10)
plt.figure(figsize=(10,5))
sns.barplot(x=platform_sales.index, y=platform_sales.values, palette='magma')
plt.title('Total Global Sales per Platform (Top 10)')
plt.ylabel('Global Sales (juta)')
plt.xlabel('Platform')
plt.show()

"""Melakukan pembersihan data dari value NAN, dan memastikan semua kolom yang digunakan adalah numerik"""

# Hilangkan data NaN
df = df.dropna()

# Pastikan semua kolom numerik
df = df[(df[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']] >= 0).all(axis=1)]
df

# Hapus baris aneh (jika semua sales = 0, Global_Sales juga 0.01 bisa jadi noise)
df = df[(df[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']] > 0).any(axis=1)]
df

# 4. Definisikan fitur dan target
X = df[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
y = df['Global_Sales']

# 5. Split data menjadi training dan testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 6. Standarisasi fitur (opsional, tapi bagus untuk model linier)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# 6. Inisialisasi Model
models = {
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "Support Vector Regressor": SVR()
}

# 7. Evaluasi dan Prediksi
results = {}

for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    results[name] = {
        "model": model,
        "mse": mse,
        "r2": r2,
        "y_pred": y_pred
    }
    print(f"ðŸ“Š {name}")
    print(f" - Mean Squared Error: {mse:.4f}")
    print(f" - RÂ² Score: {r2:.4f}")
    print()

# 8. Visualisasi Prediksi vs Aktual
plt.figure(figsize=(15, 5))

for i, (name, res) in enumerate(results.items()):
    plt.subplot(1, 3, i+1)
    plt.scatter(y_test, res["y_pred"], alpha=0.6, edgecolors='k')
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
    plt.xlabel("Actual")
    plt.ylabel("Predicted")
    plt.title(f"{name}\nRÂ² = {res['r2']:.2f}, MSE = {res['mse']:.2f}")
    plt.grid(True)

plt.tight_layout()
plt.show()

# Nilai evaluasi dari masing-masing model
models = ['Linear Regression', 'Random Forest', 'Support Vector Regressor']
r2_scores = [1.00, 0.83, 0.42]
mses = [0.00, 0.71, 2.50]

x = np.arange(len(models))  # Label lokasi
width = 0.35  # Lebar batang

# Buat subplot
fig, ax1 = plt.subplots(figsize=(10, 6))

# Bar chart untuk RÂ² dan MSE
bars1 = ax1.bar(x - width/2, r2_scores, width, label='RÂ² Score', color='skyblue')
bars2 = ax1.bar(x + width/2, mses, width, label='MSE', color='salmon')

# Label dan format
ax1.set_ylabel('Scores')
ax1.set_title('Perbandingan Model Regresi: RÂ² dan MSE')
ax1.set_xticks(x)
ax1.set_xticklabels(models)
ax1.legend()

# Tambahkan nilai di atas batang
for bar in bars1 + bars2:
    height = bar.get_height()
    ax1.annotate(f'{height:.2f}',
                 xy=(bar.get_x() + bar.get_width() / 2, height),
                 xytext=(0, 3),  # offset vertikal
                 textcoords="offset points",
                 ha='center', va='bottom')

plt.tight_layout()
plt.show()